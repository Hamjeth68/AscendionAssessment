name: React Native CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'
  RUBY_VERSION: '3.0'

jobs:
  # Code Quality & Testing
  code-quality:
    name: Code Quality & Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: TypeScript Check
      run: npx tsc --noEmit
      
    - name: ESLint Check
      run: npm run lint
      
    - name: Prettier Check
      run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json}"
      
    - name: Run Unit Tests
      run: npm test -- --coverage --watchAll=false
      
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Android Build
  android-build:
    name: Android Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Dependencies
      run: npm ci
      
    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make Gradlew Executable
      run: cd android && chmod +x ./gradlew
      
    - name: Generate Debug APK
      run: cd android && ./gradlew assembleDebug --stacktrace
      
    - name: Upload Debug APK
      uses: actions/upload-artifact@v3
      with:
        name: android-debug-apk
        path: android/app/build/outputs/apk/debug/app-debug.apk
        
    - name: Run Android Tests
      run: cd android && ./gradlew test --stacktrace

  # iOS Build (macOS runner required)
  ios-build:
    name: iOS Build & Test
    runs-on: macos-latest
    needs: code-quality
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Cache CocoaPods
      uses: actions/cache@v3
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
          
    - name: Install CocoaPods
      run: cd ios && pod install --repo-update
      
    - name: Build iOS App
      run: |
        cd ios
        xcodebuild -workspace MobileAssessment.xcworkspace \
                   -scheme MobileAssessment \
                   -configuration Debug \
                   -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
                   -derivedDataPath build \
                   build
                   
    - name: Run iOS Tests
      run: |
        cd ios
        xcodebuild -workspace MobileAssessment.xcworkspace \
                   -scheme MobileAssessment \
                   -configuration Debug \
                   -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
                   -derivedDataPath build \
                   test

  # Security Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Run Security Audit
      run: npm audit --audit-level moderate
      
    - name: Run Snyk Security Check
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Performance & Bundle Analysis
  performance-analysis:
    name: Performance & Bundle Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Bundle Size Analysis
      run: |
        npx react-native bundle \
          --platform android \
          --dev false \
          --entry-file index.js \
          --bundle-output android-bundle.js \
          --assets-dest ./assets
        du -sh android-bundle.js
        
    - name: Upload Bundle Analysis
      uses: actions/upload-artifact@v3
      with:
        name: bundle-analysis
        path: |
          android-bundle.js
          ./assets

  # Release Build (only on release)
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [android-build, ios-build, security-scan]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Dependencies
      run: npm ci
      
    - name: Decode Keystore
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/release-key.keystore
        
    - name: Build Release APK
      env:
        RELEASE_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        RELEASE_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        RELEASE_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      run: cd android && ./gradlew assembleRelease
      
    - name: Build Release AAB
      env:
        RELEASE_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        RELEASE_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        RELEASE_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      run: cd android && ./gradlew bundleRelease
      
    - name: Upload Release APK
      uses: actions/upload-artifact@v3
      with:
        name: android-release-apk
        path: android/app/build/outputs/apk/release/app-release.apk
        
    - name: Upload Release AAB
      uses: actions/upload-artifact@v3
      with:
        name: android-release-aab
        path: android/app/build/outputs/bundle/release/app-release.aab

  # Deploy to App Center (optional)
  deploy-app-center:
    name: Deploy to App Center
    runs-on: ubuntu-latest
    needs: release-build
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Download Release APK
      uses: actions/download-artifact@v3
      with:
        name: android-release-apk
        path: ./
        
    - name: Upload to App Center
      uses: wzieba/App-Center-action@v1.3.2
      with:
        appName: ${{ secrets.APP_CENTER_APP_NAME }}
        token: ${{ secrets.APP_CENTER_TOKEN }}
        group: ${{ secrets.APP_CENTER_GROUP }}
        file: app-release.apk
        notifyTesters: true
        debug: false

  # Slack Notification
  notify-slack:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [android-build, ios-build]
    if: always()
    
    steps:
    - name: Slack Notification - Success
      if: needs.android-build.result == 'success' && needs.ios-build.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#mobile-dev'
        text: '✅ Mobile Assessment build successful!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Slack Notification - Failure
      if: needs.android-build.result == 'failure' || needs.ios-build.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#mobile-dev'
        text: '❌ Mobile Assessment build failed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}